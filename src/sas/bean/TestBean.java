// This file is generated by genbeans tool. Do NOT edit it! @formatter:off
package sas.bean;

import sas.core.Bean;
import sas.core.MarshalException;
import sas.core.OctetsStream;

/**
 * bean的注释
 */
public final class TestBean extends Bean<TestBean> implements Comparable<TestBean>
{
	private static final long serialVersionUID = 0xbeacaa44540448ccL;
	public  static final int BEAN_TYPE = 1;
	public  static final int TEST_CONST1 = 5; // 测试类静态常量
	public  static final String TEST_CONST2 = "test_const2";

	public  /* 1*/ int value1; // 字段的注释
	public  /* 2*/ long value2;

	public TestBean()
	{
	}

	public TestBean(int value1, long value2)
	{
		this.value1 = value1;
		this.value2 = value2;
	}

	@Override
	public void reset()
	{
		value1 = 0;
		value2 = 0;
	}

	public void assign(TestBean b)
	{
		if(b == null) { reset(); return; }
		this.value1 = b.value1;
		this.value2 = b.value2;
	}

	public int getValue1()
	{
		return value1;
	}

	public void setValue1(int value1)
	{
		this.value1 = value1;
	}

	public long getValue2()
	{
		return value2;
	}

	public void setValue2(long value2)
	{
		this.value2 = value2;
	}

	@Override
	public int type()
	{
		return 1;
	}

	@Override
	public int initSize()
	{
		return 16;
	}

	@Override
	public int maxSize()
	{
		return 16;
	}

	@Override
	public TestBean create()
	{
		return new TestBean();
	}

	@Override
	public OctetsStream marshal(OctetsStream s)
	{
		if(this.value1 != 0) s.marshal1((byte)1).marshal(this.value1);
		if(this.value2 != 0) s.marshal1((byte)2).marshal(this.value2);
		return s.marshal1((byte)0);
	}

	@Override
	public OctetsStream unmarshal(OctetsStream s) throws MarshalException
	{
		for(;;) { int i = s.unmarshalByte() & 0xff, t = i >> 6; switch(i & 0x3f)
		{
			case 0: return s;
			case 1: this.value1 = s.unmarshalInt(t); break;
			case 2: this.value2 = s.unmarshalLong(t); break;
			default: s.unmarshalSkipVar(t);
		}}
	}

	@Override
	public TestBean clone()
	{
		return new TestBean(value1, value2);
	}

	@Override
	public int hashCode()
	{
		int h = 1 * 0x9e3779b1;
		h = h * 31 + 1 + this.value1;
		h = h * 31 + 1 + (int)this.value2;
		return h;
	}

	@Override
	public boolean equals(Object o)
	{
		if(o == this) return true;
		if(!(o instanceof TestBean)) return false;
		TestBean b = (TestBean)o;
		if(this.value1 != b.value1) return false;
		if(this.value2 != b.value2) return false;
		return getClass() == o.getClass();
	}

	@Override
	public int compareTo(TestBean b)
	{
		if(b == this) return 0;
		if(b == null) return 1;
		int c;
		c = this.value1 - b.value1; if(c != 0) return c;
		c = Long.signum(this.value2 - b.value2); if(c != 0) return c;
		return 0;
	}

	@Override
	public String toString()
	{
		StringBuilder s = new StringBuilder(16 + 16 * 2).append('{');
		s.append(this.value1).append(',');
		s.append(this.value2).append(',');
		s.setLength(s.length() - 1);
		return s.append('}').toString();
	}

	@Override
	public StringBuilder toJson(StringBuilder s)
	{
		if(s == null) s = new StringBuilder(1024);
		s.append('{');
		s.append("\"value1\":").append(this.value1).append(',');
		s.append("\"value2\":").append(this.value2).append(',');
		s.setLength(s.length() - 1);
		return s.append('}');
	}

	@Override
	public StringBuilder toLua(StringBuilder s)
	{
		if(s == null) s = new StringBuilder(1024);
		s.append('{');
		s.append("value1=").append(this.value1).append(',');
		s.append("value2=").append(this.value2).append(',');
		s.setLength(s.length() - 1);
		return s.append('}');
	}
}
