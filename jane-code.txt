==================
■ jane编码规范 ■
==================

● 原则
每个有经验开发人员都有自己的编码风格,有些是遵照语言官方的习惯,有些是继承前辈牛人的规则,也有少数人自成一派.
严格来说,一个项目一种语言的代码应该保持一致的风格,以避免让人感觉混乱,这可能比不符合自己习惯但保持一致风格的代码还难看.
但越是有经验的人,习惯越不容易改变,因此制定编码规范是一项很难抉择的工作.

因此,这里仅按照多数人的习惯来制定主要的编码风格,有些细节并不严格要求,甚至不做推荐,以便保留每个人自己的一定习惯.
这对于程序人数较少的项目来说是比较合适的,每个人负责不同部分,至少能保持不同部分的代码风格统一.
在少量修改其他人负责的代码时,敬请尊重其原作者的习惯来修改.

此编码规范尽量统一多种语言的通用部分,避免切换语言产生的不适感,也便于统一跨语言项目的标识符规则.
目前,仅规范C++,Java,C#,Lua的编码规范.

● 共同命名规则
* 文件名采用下划线间隔的小写字母(Java类文件除外,如util_math.cpp)
* 命名空间采用简单的小写单词(如:myproject::server)
* 类/结构体/接口/枚举名采用大驼峰式(如:TaskObject)
* 函数名采用小驼峰式(如:setIntParam)
* 成员私有/保护的变量采用下划线开头的小驼峰式(如:_userName)
* 成员公开变量采用小驼峰式(如:userName)
* 全局变量名使用g_开头(如:g_sharedValue)
* 函数内静态变量使用s_开头(如:s_lastValue)
* 函数内临时栈变量可使用比较通用的单词缩写或小驼峰式(如:i,j,addr,myProp)
* 宏/常量采用下划线间隔的大写单词(如:MAX_VALUE)
* 以上命名如果含有类别的单词,则按大类到小类的顺序排在前面,便于排序分类(如:SERVER_MAIL_MAX_COUNT)
* 代码缩进统一使用4个空格长的tab符
* 运算符前后应加空格,小括号和中括号前后不应加空格,大括号前后如没有换行应加空格或tab符,逗号只在后面加空格
* 有时需要垂直对齐的代码,为便于阅读,可以使用若干空格间隔

● 大括号规则(C++,Java,C#)
前大括号的放置主要有两种规则,一种是放到前一句的行尾,另一种是单独放到一行中,两种方式都有很大的支持者,也各有好处.
放到行尾的好处是代码比较紧凑,符合C和Java的(准)官方规则,但也经常不容易识别代码块,如:
	if( a.hasValue1() ||
	    b.hasValue2() ||
	    c.hasValue3()) {
	    d.setValue4(1);
	}
而单独放到一行就很容易分辨代码块,而且这种风格是C#及微软的官方规则.
二者各有利弊,所以不做严格规定,要求每个人在自己负责的程序文件中选择并保持统一风格.

● 注释规则
尽量写注释的地方: 定义类,定义成员变量,定义成员函数,定义全局变量.
不易理解的地方加注释: 函数实现,宏定义.
少量注释推荐使用单行注释,大块含换行的注释使用块注释
注释中可以写中文,但代码中不能写含中文的标识符.

● 代码编码
没有特殊情况,应一律使用无BOM的UTF-8及UNIX的换行符(\n)规则.
其它文本类文件也尽量使用此规则.

● 编译警告规则
一般情况下不留下任何编译警告,如果确实不容易避免且确实保证没有问题,可想办法屏蔽警告输出

● IDE规则
一般情况下,一个项目内要求相同的语言使用相同的IDE来开发.
但也有些牛人确实对其它某个IDE特别专精,那么在不影响其他人开发也不影响其开发效率的情况下,允许使用.
当前推荐:
C++/C#: Visual Studio 2010+
Java:   Eclipse 4.x
Lua:    LDT (Lua Development Tools)

● 代码配色规则
不做要求,每个人可选择自己习惯的代码配色标准.
