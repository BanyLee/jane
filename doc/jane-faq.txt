=================
■ jane框架Q&A ■
=================

● 什么是jane

jane是一套开发框架，主要包括网络通信和数据存取两方面主要的底层支持功能，使用者可以在此之上便捷地开发高效的数据处理事务。

● 基于jane框架的开发使用什么编程语言

jane使用Java语言开发，也推荐使用Java语言开发上层逻辑，当然也可以方便地使用其它基于JVM的语言开发，例如Scala、Groovy、JRuby、Jython等等；支持Java脚本标准的语言也可以使用，例如JDK内置的JavaScript语言(Rhino，Nashorn)和jane内置的Lua语言支持(LuaJ)

● 为什么要使用Java语言作为jane框架的主要语言

选择Java是一种折中的考虑，而不是偏向考虑性能或考虑稳定性而选择其它语言。
没有选择C/C++及同级或更低级语言的主要原因是这些语言不够安全和稳定，出错的代价比较高，bug也很难查。不同平台的实现标准有很多差别，开发/编译/调试平台支持的兼容性混乱，不利于目前越来越多元化系统的同等支持，除C++以外都不太适合规模较大的系统开发，而C++语言又变得越来越复杂、不利于入门和深入学习，还有编译很慢和语言细节的陷阱越来越多等缺陷。
没有选择高级动态语言(如JavaScript，Python，Ruby，Perl，Lua)的主要原因是这些语言开发规模较大较复杂的程序时很容易导致混乱，动态性决定了开发时难以检测到潜在的bug，也很大程度影响着性能和内存的高效利用。
这样，折中这两类语言之后，Java语言就凸显了很多优势，同时解决了上面提到的问题。从性能上比起纯编译型语言并不差很多，大量实践表明同等开发水平人员开发的Java程序性能大概是C++程序性能的60%到95%，很多考验性能的密集计算程序使用纯Java语言都可以获得接近编译型语言的性能。从稳定和安全性上来说，绝大部分意外出错都不会导致整个程序的崩溃，而且可以输出易于查错的异常日志和CPU/内存/线程/对象分布/GC等监控运行状态，并且在多数情况下都不影响程序后续的正常运行，因为很多意外错误的影响范围很小，为此而导致崩溃是服务器程序所无法容忍的。从动态特性上看，Java仍以易于查错和便于IDE辅助的静态类型为主，但也为一定的动态特性给予支持，并且几乎无缝地和脚本语言之间相互调用。从可重用组件的角度上看，Java组件之间的兼容性和向下版本兼容性都一直非常完善，不会受到不同版本运行平台和不同操作系统的因素而影响。目前仅有的主要缺陷是Java的对象分布仍然没有纯静态语言紧凑，而且受垃圾收集(GC)的影响，但在内存和CPU核心数越来越多、越来越先进的GC算法的发展下，这类问题的影响会越来越小。
当然，也有和Java特性类似的C#语言，先从语言角度来看，C#语言虽然出现的时间没有Java长，但语法的支持却越来越丰富，目前已经超越Java很大的距离，但语法的丰富并不是很重要的选择因素，Java的语法也不是一直没有发展，而是选择了更加保守的渐进支持，选取了更有用的语法而不是更多语法，让Java的这种简洁也变成一种优势，而不是和C#重合。
从运行时库的角度来看，JDK一直超前于.NET类库，不过目前差距越来越小了，但由于这种历史上的差距原因，Java在服务器端领域先一步发展起来，可重用稳定组件的数量和质量上远超过.NET平台上的，尤其是其中大部分是开源组件。
从VM的角度来看，JVM几乎主导着JIT运行时技术的发展，还在开源、几大平台的同时的稳定支持上超越.NET，使很多新语言都诞生在JVM上，如更加偏向函数式的Scala和Groovy语言，不但利用了JVM强大的运行能力，也方便和其它基于JVM语言相互访问，弥补了Java语言本身的弱点。而.NET的VM优势并不多，可取的是支持值类型对象使很多数据结构的内存布局更加紧凑，比Java匿名类更加简洁的作为第一类对象的函数委托，以及对异步(async)和协程(coroutine)的支持。
从IDE的角度来看，Java的主流IDE(如Eclipse和IntelliJ IDEA)都支持各个平台，而C#由于微软的政策，产生了在Windows和非Windows平台中VM和IDE领域上的分裂，Linux平台仅有的Mono运行时的性能和稳定性还是和微软仅支持Windows的运行时有一定的差距。
以上分析的Java优势也可以解释很多编程语言排行中Java一直排在前几位且C#一直未超越Java的原因，以及C#在语言上的部分先进性无法替代Java的综合优势的结论。

● 为什么要重造一个新框架

所谓框架，就是开发者能够在一个稳固的程序基础上，更多更有效地注重事务逻辑的开发，而不必关心支撑这些逻辑的底层实现细节。现有的成熟Java框架确实很多，而且Java开发者大多都会使用一些流行的框架，甚至成为国内Java职位的必须掌握的技能，如Spring和Hibernate。jane框架的出现不是为了和现有的成熟框架竞争，而是去弥补其它框架的不足，也不是为了大而全的角度去支持，从是塑造一个在其优势领域无法替代的，最终成为成熟靠谱的一个框架。

● jane框架有什么优势和特点

从数据存取业务上来看，成熟的框架是Hibernate，还有其它一些流行的框架，这些框架有一些共同的特点，就是都基于一些Java标准，并且连接远程的SQL数据库。在这种限制下，无论如何实现，都不可避免带来额外的性能开销和复杂度，也给初学者带来更高的学习曲线。jane框架弥补了这一不足，采用相反的角度去实现这种业务：不基于某种标准，只以最简原则来实现，在很多领域中，标准并不是必需的，从直观的方向解决问题更容易让初学者入门；不支持SQL数据库，只使用高性能的key-value型NoSQL数据库，SQL数据库常用的一些功能都会以高效的更贴近Java的方式来处理；不支持远程连接数据库，而是使用嵌入式数据库，在不需要公用数据库访问的很多领域都可以带来性能和部署、开发、测试的便捷性；另外jane有统一的数据库存储接口，可以支持更多的数据库引擎，甚至可以一定程度支持操作远程数据库。
从网络通信业务来看，jane是基于Mina网络库而建的，使用广泛支持的TCP传输协议，在不同的系统平台都有最好的实现(在Windows平台下推荐使用JDK7+)，以很小的开销来支持大规模的网络连接，并很容易增加数据加密和压缩的过滤器。同时在此基础上jane也实现了一个简单高效的HTTP协议收发，适用于一些特定的需求，用以弥补其它HTTP服务器复杂实现带来的开销。应用层的网络协议是在参考protobuf而设计的一套紧凑而可扩展的二进制协议，跟protobuf相比，生成的代码更加简化易读、协议更加紧凑，支持的数据结构更加广泛，并支持RPC的调用/回调/超时机制。目前这套网络框架和协议层已经移植到C#语言。
总之，jane不追求全面的主流的适用性，而是在更注重性能和轻量级(框架核心只有不到10K行Java代码)领域中的一种通用化，这种领域在高负载的业务逻辑(如游戏等网络应用服务器)上发挥出其它主流框架很难替代的作用。

● jane框架依赖哪些其它的库

jane并不是为了极度的轻量级而全部实现所需的功能，而是调查并选取了一些稳定高效轻量级的开源库作为基础，减少了作者的开发和测试时间，并专注于jane自身的优势和特点。
选取的依赖库有：
SLF4J和Log4j2：后者是jane所使用的日志库，前者SLF4J接口的使用范围较广，被Mina库依赖，适合内置并推荐上层开发者使用。Log4j2作为后端，是SLF4J接口的具体实现，运行效率较高。
Mina：著名的Java网络底层库，apache基金会的子项目，高效易用。
LevelDB：嵌入式key-value型NoSQL数据库，C++语言实现，Google公司开发，jane增加了自实现的jni接口来访问，目前已经编译好的有Windows平台的32/64位版本和Linux平台的64位版本，生产用途应使用64位的版本。
LuaJ：Lua语言在JVM平台最好的一个实现，支持Java的脚本语言接口标准，运行效率也很高。
以上依赖库以及jane包括源代码的jar和动态库文件总大小不到10MB。

● jane框架如何利用多核性能

近几年CPU的核心数量发展代替了过去的单核频率发展，使得单机性能的不断突破只能依靠CPU的多核利用上。单机的并行计算从根本上来看，只能用多条执行进程并发的方式利用。而现代操作系统根据内存等资源的划分，把进程再细分成可共享硬件资源的线程，因此多核的利用既可以用多进程的方式，也可以在单进程中划分多线程的方式，当然也可以混合利用。不同的利用方式有着不同的开发模式，多进程的模式很难共享内存资源，数据的共享和同步需要借助额外的复杂操作，但这些复杂操作很多也可用于分布式计算机的并行，并且一个进程的崩溃不会影响到其它进程。而一个进程内多线程的模式，可以非常方便地共享寻址同一块内存资源，同步的开销也小了很多，但上述多进程的优势就变成了劣势。
jane主要采用了单进程多线程的方式利用多核CPU。并且在权衡优劣的情况下，将多线程的劣势影响尽量地减至最小。如进程的崩溃影响，在jane采用Java编程语言后可以使崩溃的可能性降到最低。另外jane也支持多进程之间的网络交互来支持分布式应用，当然在单台计算机性能充足的情况下，分布式的架构反而会带来开发调试的复杂和低稳定性。而jane采用多线程共享内存却带来了极大的优势，比如在目前已经普及的64位平台下，单进程的内存空间已经可以利用全部的物理内存；内存的共享也代表了数据的一致性、唯一性和无传递开销，降低了数据库不同步的风险也节约了内存的占用，而进程内数据访问的同步开销也很低。

● jane框架所支持的数据库有哪些特性

jane的底层存储系统使用key-value型的NoSQL数据库，但也有一些对象数据库和内存数据库的特征。在jane的封装下，从上层看类似于对象数据库。所有的数据字段value都自动映射到JavaBean对象，不必直接读写底层的数据字段，就像Java容器一样方便使用。从效率来看类似于内存数据库，jane内部实现了高效的cache系统，让数据的访问尽量在内存中，使访问性能达到极致。不过由于支持并发访问，Bean对象仍需要对key加锁后才能读写。
jane在数据持久化的过程中，为了高性能地访问数据库，只能定期(可设置时间间隔)把所有修改的数据批量写入数据库存储引擎，为了保证保存每批次已修改数据的完整性，不但需要存储引擎支持批量写的原子性，也需要每批次修改数据的事务完整性，这要求收集修改数据的时候暂停所有数据访问事务，在持久化过程中确保不再依赖内存中的Bean对象时，才能继续数据的访问事务。这个过程类似于虚拟机(VM)的垃圾回收(GC)，当然也借助于现代GC的思想，持久化的很大一部分过程，已经实现成可以和数据的访问事务并发，一般只有很少的一段时间需要暂停所有事务。
jane支持定期(可设置时间间隔)备份数据库(可设置备份路径)，其中使用LevelDB存储引擎时支持增量备份和定期(可设置时间间隔)完整备份。
按照关系型数据库理论的隔离级别来说，jane属于Serializable的级别，即可串行化，但也支持在安全情况下的脏读操作。

● jane框架所支持的数据库不支持哪些SQL数据库的特性

jane不支持SQL和类SQL的查询语言，只使用Java语言以编程的方式访问对象来读写数据，支持原生的Java基本数据类型，和比关系型数据库更复杂的数据结构的字段，如集合(vector，list，set等)和映射(hashmap，treemap等)，但不支持null值。
jane进程只能连接一个数据库(DB)，可以有多个表(table)，每个表也是由若干记录(record)构成，每个记录有且只有一个主键(key)，对id类型的key支持自增长，不支持其它字段的索引(index)，也不支持SQL的表关系操作，这些只能以编程的方式支持和约束。
jane的数据访问一般情况下不支持修改操作的回滚，主要是为了考虑效率问题，所以为了确保没有意外的异常导致存储过程中断而影响事务完整性，要求使用者尽量在存储过程中，把修改操作置于最后，如果很难这样做，可在取数据(get)的时候做clone操作，然后在存储过程的最后增加保存(put)操作。jane也提供了支持回滚的封装，可牺牲一些开销换取事务安全性。
jane不支持直接操作远程数据库，但可通过数据通信方式指挥另一个jane框架的应用访问数据。
jane的嵌入式数据库不支持多进程同时访问，一个数据库的数据只能交给一个jane进程来管理。

● jane框架访问数据库怎么解决死锁问题

并发地同时地访问多个共享数据，理论上总是会有死锁的机会出现，一旦出现，结果是很糟糕的，不但数据访问会卡住，后续的很多相关事务都无法进展。所以jane对待死锁的态度是很坚决地去避免，方法是每个存储过程在每次加锁时都要先释放上次加的锁，而每次加锁都支持同时加多个锁。jane内部为每次加的多个锁排序并依次加锁，这样理论上完全避免了因逆序加锁导致的死锁。不过这样做的话，有的事务逻辑无法在第一次加锁时同时加所有的锁，导致需要第N次加锁才能做到同时加所有所需的锁，这样两次加锁之间有很小的可能，因其它线程的修改导致一个事务内获取的数据不一致，这种问题尚无固定和底层自动的解决方案，只能由使用者注意每次加锁后要和之前取得的数据做比较，如果出现不一致，可立即退出存储过程并让底层重做此事务。另外jane也有定期检查是否有存储过程执行超时，发现后会发出打断信号(Java的线程中断信号)，并输出异常日志，但这并不能解决一些死循环计算问题，这几乎是所有语言和运行时都无法解决的问题，仍然需要开发时注意循环代码的退出时机。

● jane框架如何实现数据库的增量备份

增量备份的目的就是减少每次备份的磁盘空间占用，同时也减少了备份的时间，达到无需每次完全备份的情况下可以取出某次备份的完整数据，这在数据库体积很大的情况下是非常重要的问题之一。增量备份的本质就是每次备份的时候只需备份有改动的数据，不考虑数据存储引擎的话，简单地实现增量备份的方法，就是每次写入数据库的同时也写入另外一个数据库，这个库可叫做增量库，每次备份数据库的时候，关闭这个增量库并新建另一个增量库即可，但这种增量备份有一些缺点，首先是写入数据库的性能降低了一半，其次是恢复起来比较繁琐，需要有额外的工具合并增量库，数据库比较庞大时非常耗时。除此之外，增量备份就只能依靠数据存储引擎的支持了，目前jane支持的数据存储引擎中只有LevelDB有增量备份的能力。
多数key-value数据库都采用B树或B+树的结构存储，这种树的节点都是按整体有序地存储在一起，很难分离修改的数据和未修改的数据，只有少数这类数据库有记录脏页的功能并在备份的时候可备份出脏页数据，但在恢复数据库的时候依然需要合并增量数据。而LevelDB却是少见的使用LSM树结构存储数据，这种树具有天然的数据分层能力，长时间的运行能够分离出冷数据和热数据，保存在不同的文件中，使更新数据只修改在热数据的文件中，再加上LevelDB对修改数据是仅新建文件并追加数据的方式，不会直接对旧数据文件修改，并在旧数据文件完全无用时删除，这些特性使增量备份非常便捷，只需在备份时保存新生成的数据文件即可。虽然并不是严格地只增量保存修改的数据，但在恢复数据库时无需合并数据，只需取出备份时刻的文件集合即可，也不影响写入数据库的性能。因此，当前jane框架推荐使用LevelDB作为存储引擎。

● jane框架为什么需要网络协议和数据库的描述文件

jane有一种核心数据结构，就是Bean类型，类似于JavaBean的概念。Bean是一种主要用于存储若干静态类型数据的类，并包含一些围绕数据相关的方法，每种Bean都是一个类。这类文件如果是手写的，不但枯燥繁杂还容易出错，因此jane使用数据描述文件来描述Bean的结构，再使用自带的代码生成工具生成出所有Bean的类代码，其中包括很多常用操作，如默认构造、拷贝赋值、重置、get/set接口、stub对象、创建/clone对象、池的分配和释放、序列化与反序列化、equals和compareTo接口实现、字符串/Json/Lua表的格式化输出等等。
jane的Bean不但可以用于网络传输的对象类型，也用于数据库记录的value类型，并且可以共享使用，所以都定义在一个描述文件中。
Bean内可包含各种基础数据类型，二进制数据，字符串，嵌套Bean以及各种序列和关联容器。
Bean的序列化参考了protobuf的设计，对所有的布尔值和整数一致看待并使用压缩方式存储，序列化时也紧凑地保存每个字段的ID和类型描述，便于字段的增加、删减、改名、改类型的向上向下兼容性，而且每个字段如果判断是默认数据还可以跳过保存以带来更小的序列化长度。
jane框架考虑到效率和未来跨语言跨平台的问题，并没有使用反射和注解机制。这样就只有生成代码的方式才能实现类型描述到类的转化，并且保证了高性能，以及对IDE类型相关辅助功能的支持和静态检查。但也有例外，如工具类里有通过XML配置文件构造Bean对象的实现就使用了反射的实现方式，因为这部分不是必需的，而且一般只在启动时加载。
描述文件中包括Bean的定义，RPC的定义，数据库表的定义，Bean/RPC协议处理器的定义。
配置文件使用Lua table的形式描述，本身也是一个符合Lua语法的文本，因此编写时具有很好的灵活性，但仍建议保持描述的整齐以便查看和编辑。代码生成器也使用Lua脚本来实现，支持只更新需要改动的Bean文件，另外还能生成Bean协议处理(Handler)的框架，并支持只更新字段注释的部分。
目前的实现还包括C#语言的Bean及其协议处理框架的生成(RPC除外)。

● jane框架在运行过程中调节时间会出现什么不利影响

jane本身对调整时间很小时影响可忽略且无论前后调整均不会出现严重问题，影响细节如下：
1.如果调节时间发生在RPC构造后回复前，则时间回退会导致timeout响应相应延迟，时间前进会导致提前触发timeout。
2.如果调节时间发生在TCP主动连接失败后等待重连的过程中，则时间回退会导致下次重连相应延迟，时间前进会导致提前重连。
3.如果调节时间发生在事务执行期间，则时间回退会导致事务超时打断的判定延迟，时间前进会导致提前触发事务打断。
4.如果调节时间发生在事务执行期间，则事务的死锁检测时机也类似事务超时判定会有所延迟或立即触发，不过影响不大。
5.时间回退会导致数据库提交/备份间隔相应延迟，时间前进会导致下次提交/备份提前或立即触发，但再下次提交/备份间隔不影响(除非再次修改了时间)。
6.调节时间会导致数据库备份目录/文件名产生相应变化，但不影响整体/增量备份和恢复的效果。
7.一些操作的时间统计中如果调节时间会导致日志输出的统计时间不正常，但没有逻辑影响。
8.日志库(SLF4J/Log4j2)、网络库(Mina)及数据库(LevelDB)可能导致未知影响。
因此，如果因为逻辑和测试需要大幅修改时间，应尽量不要修改系统时间，而只修改逻辑时间，框架中的逻辑只应依赖逻辑时间。

● 为什么叫jane

在叫jane之前，初始开发的阶段曾经叫sas，意思是Smart App Server。由于软件业里叫sas的已经有了，基本开发完成后考虑更换一个正式的名字，决定叫jane的理由如下：
jane = Just Another Network Engine
jane的中文音译是“简”，体现了jane的简洁开发理念。
很多Java相关中间件的名字以J开头。
网上很难找到叫jane的软件名称，避免重名。

● 为什么不使用更强大的IntelliJ IDEA(以下简称IDEA)作为开发的IDE，而使用Eclipse

首先不可否认IDEA确实功能强大，很多功能都比Eclipse做得好。
其实较新版本的Eclipse也补充了足够的功能，这两个IDE哪个用熟都能得心应手，此时二者差异并不大了；但二者的配置都非常复杂且差异较大，所以切换的成本很高。
曾经尝试过熟悉IDEA后，发现也有一些Eclipse很好用的功能，IDEA并不支持，或者尚未找到解决办法，如:
1.在IDEA的代码编译器中，输入调用的函数名后，不像Eclipse那样可以猜测要填入的函数参数，也无法用tab快速调到下个合适的代码位置。
2.在IDEA中调试代码时，修改代码需要手动编译，无法在保存时自动编译并在调试中生效。
3.IDEA的代码提示弹窗界面的字体和颜色无法自定义，默认效果不够好。
4.需要JavaEE相关开发，Eclipse是免费的，而IDEA完整版非免费。
5.Eclipse的运行开销比IDEA少些。
