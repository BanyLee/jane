Index: compress/CompressDeflate.java
===================================================================
--- compress/CompressDeflate.java	(revision 5796)
+++ compress/CompressDeflate.java	(working copy)
@@ -10,9 +10,6 @@
 import java.util.zip.Deflater;
 import java.util.zip.Inflater;
 
-import org.h2.api.ErrorCode;
-import org.h2.message.DbException;
-
 /**
  * This is a wrapper class for the Deflater class.
  * This algorithm supports the following options:
@@ -47,7 +44,7 @@
                 deflater.setStrategy(strategy);
             }
         } catch (Exception e) {
-            throw DbException.get(ErrorCode.UNSUPPORTED_COMPRESSION_OPTIONS_1, options);
+            throw new RuntimeException(e);//DbException.get(ErrorCode.UNSUPPORTED_COMPRESSION_OPTIONS_1, options);
         }
     }
 
@@ -87,7 +84,7 @@
                 throw new DataFormatException(len + " " + outLen);
             }
         } catch (DataFormatException e) {
-            throw DbException.get(ErrorCode.COMPRESSION_ERROR, e);
+            throw new RuntimeException(e);//DbException.get(ErrorCode.COMPRESSION_ERROR, e);
         }
         decompresser.end();
     }
Index: mvstore/WriteBuffer.java
===================================================================
--- mvstore/WriteBuffer.java	(revision 5796)
+++ mvstore/WriteBuffer.java	(working copy)
@@ -290,6 +290,12 @@
         return buff;
     }
 
+    //PATCH: sas begin
+    public void setBuffer(ByteBuffer buf) {
+        buff = buf;
+    }
+    //PATCH: sas end
+
     private ByteBuffer ensureCapacity(int len) {
         if (buff.remaining() < len) {
             grow(len);
Index: store/fs/FilePathDisk.java
===================================================================
--- store/fs/FilePathDisk.java	(revision 5796)
+++ store/fs/FilePathDisk.java	(working copy)
@@ -1,4 +1,4 @@
-/*
+/*@formatter:off
  * Copyright 2004-2014 H2 Group. Multiple-Licensed under the MPL 2.0,
  * and the EPL 1.0 (http://h2database.com/html/license.html).
  * Initial Developer: H2 Group
@@ -18,15 +18,8 @@
 import java.nio.channels.FileChannel;
 import java.nio.channels.FileLock;
 import java.nio.channels.NonWritableChannelException;
-import java.util.ArrayList;
 import java.util.List;
 
-import org.h2.api.ErrorCode;
-import org.h2.engine.SysProperties;
-import org.h2.message.DbException;
-import org.h2.util.IOUtils;
-import org.h2.util.New;
-
 /**
  * This file system stores files on disk.
  * This is the most common file system.
@@ -70,16 +63,20 @@
      * @return the native file name
      */
     public static String expandUserHomeDirectory(String fileName) {
+/*
         if (fileName.startsWith("~") && (fileName.length() == 1 ||
                 fileName.startsWith("~/"))) {
             String userDir = SysProperties.USER_HOME;
             fileName = userDir + fileName.substring(1);
         }
+*/
         return fileName;
     }
 
     @Override
     public void moveTo(FilePath newName) {
+        throw new UnsupportedOperationException();
+/*
         File oldFile = new File(name);
         File newFile = new File(newName.name);
         if (oldFile.getAbsolutePath().equals(newFile.getAbsolutePath())) {
@@ -104,6 +101,7 @@
         }
         throw DbException.get(ErrorCode.FILE_RENAME_FAILED_2,
                 new String[]{name, newName.name});
+*/
     }
 
     private static void wait(int i) {
@@ -122,7 +120,7 @@
     @Override
     public boolean createFile() {
         File file = new File(name);
-        for (int i = 0; i < SysProperties.MAX_FILE_RETRY; i++) {
+        for (int i = 0; i < 1/*SysProperties.MAX_FILE_RETRY*/; i++) {
             try {
                 return file.createNewFile();
             } catch (IOException e) {
@@ -140,6 +138,8 @@
 
     @Override
     public void delete() {
+        throw new UnsupportedOperationException();
+/*
         File file = new File(name);
         for (int i = 0; i < SysProperties.MAX_FILE_RETRY; i++) {
             IOUtils.trace("delete", name, null);
@@ -150,10 +150,13 @@
             wait(i);
         }
         throw DbException.get(ErrorCode.FILE_DELETE_FAILED_1, name);
+*/
     }
 
     @Override
     public List<FilePath> newDirectoryStream() {
+        throw new UnsupportedOperationException();
+/*
         ArrayList<FilePath> list = New.arrayList();
         File f = new File(name);
         try {
@@ -171,6 +174,7 @@
         } catch (IOException e) {
             throw DbException.convertIOException(e, name);
         }
+*/
     }
 
     @Override
@@ -190,7 +194,7 @@
             String fileName = new File(name).getCanonicalPath();
             return getPath(fileName);
         } catch (IOException e) {
-            throw DbException.convertIOException(e, name);
+            throw /*DbException.convertIOException(e, name)*/new RuntimeException(name, e);
         }
     }
 
@@ -247,6 +251,8 @@
 
     @Override
     public void createDirectory() {
+        throw new UnsupportedOperationException();
+/*
         File dir = new File(name);
         for (int i = 0; i < SysProperties.MAX_FILE_RETRY; i++) {
             if (dir.exists()) {
@@ -261,6 +267,7 @@
             wait(i);
         }
         throw DbException.get(ErrorCode.FILE_CREATION_FAILED_1, name);
+*/
     }
 
     @Override
@@ -272,7 +279,7 @@
                 FileUtils.createDirectories(parent.getAbsolutePath());
             }
             FileOutputStream out = new FileOutputStream(name, append);
-            IOUtils.trace("openFileOutputStream", name, out);
+            /*IOUtils.trace("openFileOutputStream", name, out);*/
             return out;
         } catch (IOException e) {
             freeMemoryAndFinalize();
@@ -308,7 +315,7 @@
             return in;
         }
         FileInputStream in = new FileInputStream(name);
-        IOUtils.trace("openFileInputStream", name, in);
+        /*IOUtils.trace("openFileInputStream", name, in);*/
         return in;
     }
 
@@ -317,7 +324,7 @@
      * that were not closed, and are no longer referenced.
      */
     static void freeMemoryAndFinalize() {
-        IOUtils.trace("freeMemoryAndFinalize", null, null);
+        /*IOUtils.trace("freeMemoryAndFinalize", null, null);*/
         Runtime rt = Runtime.getRuntime();
         long mem = rt.freeMemory();
         for (int i = 0; i < 16; i++) {
@@ -336,7 +343,7 @@
         FileDisk f;
         try {
             f = new FileDisk(name, mode);
-            IOUtils.trace("open", name, f);
+            /*IOUtils.trace("open", name, f);*/
         } catch (IOException e) {
             freeMemoryAndFinalize();
             try {
@@ -356,6 +363,8 @@
     @Override
     public FilePath createTempFile(String suffix, boolean deleteOnExit,
             boolean inTempDir) throws IOException {
+        throw new UnsupportedOperationException();
+/*
         String fileName = name + ".";
         String prefix = new File(fileName).getName();
         File dir;
@@ -383,6 +392,7 @@
             }
             return get(f.getCanonicalPath());
         }
+*/
     }
 
 }
@@ -404,7 +414,7 @@
 
     @Override
     public void force(boolean metaData) throws IOException {
-        String m = SysProperties.SYNC_METHOD;
+        String m = /*SysProperties.SYNC_METHOD*/"force";
         if ("".equals(m)) {
             // do nothing
         } else if ("sync".equals(m)) {
