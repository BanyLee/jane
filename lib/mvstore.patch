Index: compress/CompressDeflate.java
===================================================================
--- compress/CompressDeflate.java	(revision 5650)
+++ compress/CompressDeflate.java	(working copy)
@@ -11,9 +11,6 @@
 import java.util.zip.Deflater;
 import java.util.zip.Inflater;
 
-import org.h2.api.ErrorCode;
-import org.h2.message.DbException;
-
 /**
  * This is a wrapper class for the Deflater class.
  * This algorithm supports the following options:
@@ -48,7 +45,7 @@
                 deflater.setStrategy(strategy);
             }
         } catch (Exception e) {
-            throw DbException.get(ErrorCode.UNSUPPORTED_COMPRESSION_OPTIONS_1, options);
+            throw new RuntimeException(e);//DbException.get(ErrorCode.UNSUPPORTED_COMPRESSION_OPTIONS_1, options);
         }
     }
 
@@ -88,7 +85,7 @@
                 throw new DataFormatException(len + " " + outLen);
             }
         } catch (DataFormatException e) {
-            throw DbException.get(ErrorCode.COMPRESSION_ERROR, e);
+            throw new RuntimeException(e);//DbException.get(ErrorCode.COMPRESSION_ERROR, e);
         }
         decompresser.end();
     }
Index: mvstore/WriteBuffer.java
===================================================================
--- mvstore/WriteBuffer.java	(revision 5650)
+++ mvstore/WriteBuffer.java	(working copy)
@@ -291,6 +291,12 @@
         return buff;
     }
 
+    //PATCH: sas begin
+    public void setBuffer(ByteBuffer buf) {
+        buff = buf;
+    }
+    //PATCH: sas end
+
     private ByteBuffer ensureCapacity(int len) {
         if (buff.remaining() < len) {
             grow(len);
Index: store/fs/FilePathDisk.java
===================================================================
--- store/fs/FilePathDisk.java	(revision 5650)
+++ store/fs/FilePathDisk.java	(working copy)
@@ -1,4 +1,4 @@
-/*
+/*@formatter:off
  * Copyright 2004-2013 H2 Group. Multiple-Licensed under the H2 License,
  * Version 1.0, and under the Eclipse Public License, Version 1.0
  * (http://h2database.com/html/license.html).
@@ -18,16 +18,8 @@
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
 import java.nio.channels.FileLock;
-import java.util.ArrayList;
 import java.util.List;
 
-import org.h2.api.ErrorCode;
-import org.h2.engine.SysProperties;
-import org.h2.message.DbException;
-import org.h2.util.IOUtils;
-import org.h2.util.New;
-import org.h2.util.Utils;
-
 /**
  * This file system stores files on disk.
  * This is the most common file system.
@@ -71,17 +63,18 @@
      * @return the native file name
      */
     public static String expandUserHomeDirectory(String fileName) {
-        if (fileName.startsWith("~") && (fileName.length() == 1 ||
-                fileName.startsWith("~/"))) {
+/*        if (fileName.startsWith("~") && (fileName.length() == 1 ||
+                  fileName.startsWith("~/"))) {
             String userDir = SysProperties.USER_HOME;
             fileName = userDir + fileName.substring(1);
         }
-        return fileName;
+*/        return fileName;
     }
 
     @Override
     public void moveTo(FilePath newName) {
-        File oldFile = new File(name);
+    	throw new UnsupportedOperationException();
+/*        File oldFile = new File(name);
         File newFile = new File(newName.name);
         if (oldFile.getAbsolutePath().equals(newFile.getAbsolutePath())) {
             return;
@@ -105,7 +98,7 @@
         }
         throw DbException.get(ErrorCode.FILE_RENAME_FAILED_2,
                 new String[]{name, newName.name});
-    }
+*/    }
 
     private static void wait(int i) {
         if (i == 8) {
@@ -123,7 +116,7 @@
     @Override
     public boolean createFile() {
         File file = new File(name);
-        for (int i = 0; i < SysProperties.MAX_FILE_RETRY; i++) {
+        for (int i = 0; i < 1/*SysProperties.MAX_FILE_RETRY*/; i++) {
             try {
                 return file.createNewFile();
             } catch (IOException e) {
@@ -141,7 +134,8 @@
 
     @Override
     public void delete() {
-        File file = new File(name);
+    	throw new UnsupportedOperationException();
+/*        File file = new File(name);
         for (int i = 0; i < SysProperties.MAX_FILE_RETRY; i++) {
             IOUtils.trace("delete", name, null);
             boolean ok = file.delete();
@@ -151,11 +145,12 @@
             wait(i);
         }
         throw DbException.get(ErrorCode.FILE_DELETE_FAILED_1, name);
-    }
+*/    }
 
     @Override
     public List<FilePath> newDirectoryStream() {
-        ArrayList<FilePath> list = New.arrayList();
+    	throw new UnsupportedOperationException();
+/*        ArrayList<FilePath> list = New.arrayList();
         File f = new File(name);
         try {
             String[] files = f.list();
@@ -172,7 +167,7 @@
         } catch (IOException e) {
             throw DbException.convertIOException(e, name);
         }
-    }
+*/    }
 
     @Override
     public boolean canWrite() {
@@ -191,7 +186,7 @@
             String fileName = new File(name).getCanonicalPath();
             return getPath(fileName);
         } catch (IOException e) {
-            throw DbException.convertIOException(e, name);
+            throw /*DbException.convertIOException(e, name)*/new RuntimeException(name, e);
         }
     }
 
@@ -248,7 +243,8 @@
 
     @Override
     public void createDirectory() {
-        File dir = new File(name);
+    	throw new UnsupportedOperationException();
+/*      File dir = new File(name);
         for (int i = 0; i < SysProperties.MAX_FILE_RETRY; i++) {
             if (dir.exists()) {
                 if (dir.isDirectory()) {
@@ -262,7 +258,7 @@
             wait(i);
         }
         throw DbException.get(ErrorCode.FILE_CREATION_FAILED_1, name);
-    }
+*/  }
 
     @Override
     public OutputStream newOutputStream(boolean append) throws IOException {
@@ -273,7 +269,7 @@
                 FileUtils.createDirectories(parent.getAbsolutePath());
             }
             FileOutputStream out = new FileOutputStream(name, append);
-            IOUtils.trace("openFileOutputStream", name, out);
+            /*IOUtils.trace("openFileOutputStream", name, out);*/
             return out;
         } catch (IOException e) {
             freeMemoryAndFinalize();
@@ -309,7 +305,7 @@
             return in;
         }
         FileInputStream in = new FileInputStream(name);
-        IOUtils.trace("openFileInputStream", name, in);
+        /*IOUtils.trace("openFileInputStream", name, in);*/
         return in;
     }
 
@@ -318,7 +314,7 @@
      * that were not closed, and are no longer referenced.
      */
     static void freeMemoryAndFinalize() {
-        IOUtils.trace("freeMemoryAndFinalize", null, null);
+        /*IOUtils.trace("freeMemoryAndFinalize", null, null);*/
         Runtime rt = Runtime.getRuntime();
         long mem = rt.freeMemory();
         for (int i = 0; i < 16; i++) {
@@ -337,7 +333,7 @@
         FileDisk f;
         try {
             f = new FileDisk(name, mode);
-            IOUtils.trace("open", name, f);
+            /*IOUtils.trace("open", name, f);*/
         } catch (IOException e) {
             freeMemoryAndFinalize();
             try {
@@ -356,8 +352,9 @@
 
     @Override
     public FilePath createTempFile(String suffix, boolean deleteOnExit,
-            boolean inTempDir) throws IOException {
-        String fileName = name + ".";
+    	    boolean inTempDir) throws IOException {
+    	throw new UnsupportedOperationException();
+/*        String fileName = name + ".";
         String prefix = new File(fileName).getName();
         File dir;
         if (inTempDir) {
@@ -384,7 +381,7 @@
             }
             return get(f.getCanonicalPath());
         }
-    }
+*/    }
 
 }
 
@@ -403,7 +400,7 @@
 
     @Override
     public void force(boolean metaData) throws IOException {
-        String m = SysProperties.SYNC_METHOD;
+        String m = /*SysProperties.SYNC_METHOD*/"force";
         if ("".equals(m)) {
             // do nothing
         } else if ("sync".equals(m)) {
