// This file is generated by genbeans tool. Do NOT edit it!
using System;
using System.Text;
using System.Collections.Generic;

namespace Jane.Bean
{
	/**
	 * 测试空bean;
	 */
	[Serializable]
	public struct TestEmpty : IBean, IEquatable<TestEmpty>, IComparable<TestEmpty>
	{
		public const int BEAN_TYPE = 4;

		public void reset()
		{
		}

		/** @param b unused */
		public void assign(ref TestEmpty b)
		{
		}

		public int type()
		{
			return 4;
		}

		public int initSize()
		{
			return 0;
		}

		public int maxSize()
		{
			return 0;
		}

		public void init()
		{
		}

		public static IBean create()
		{
			IBean b = new TestEmpty();
			b.init();
			return b;
		}

		public OctetsStream marshal(OctetsStream s)
		{
			return s.marshal1((byte)0);
		}

		public OctetsStream unmarshal(OctetsStream s)
		{
			for(;;) { int i = s.unmarshalUByte(), t = i & 3; switch(i >> 2)
			{
				case 0: return s;
				default: s.unmarshalSkipVar(t); break;
			}}
		}

		public object Clone()
		{
			return new TestEmpty();
		}

		public override int GetHashCode()
		{
			int h = unchecked(4 * (int)0x9e3779b1);
			return h;
		}

		public bool Equals(TestEmpty b)
		{
			return true;
		}

		public override bool Equals(object o)
		{
			if(!(o is TestEmpty)) return false;
			return true;
		}

		public int CompareTo(TestEmpty b)
		{
			return 0;
		}

		public int CompareTo(IBean b)
		{
			return b is TestEmpty ? CompareTo((TestEmpty)b) : 1;
		}

		public int CompareTo(object b)
		{
			return b is IBean ? CompareTo((IBean)b) : 1;
		}

		public override string ToString()
		{
			StringBuilder s = new StringBuilder(16 + 0 * 2).Append('{');
			return s.Append('}').ToString();
		}

		public StringBuilder toJson(StringBuilder s)
		{
			if(s == null) s = new StringBuilder(1024);
			s.Append('{');
			return s.Append('}');
		}

		public StringBuilder toJson()
		{
			return toJson(null);
		}

		public StringBuilder toLua(StringBuilder s)
		{
			if(s == null) s = new StringBuilder(1024);
			s.Append('{');
			return s.Append('}');
		}

		public StringBuilder toLua()
		{
			return toLua(null);
		}
	}
}
